---
import Layout from '../../layouts/DashboardLayout.astro';
import { authService } from '../../lib/authService';

// Obtener tags del backend
const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:3001';
const response = await fetch(`${API_URL}/api/tags`);
const tags = await response.json();
---

<Layout title="Crear Noticia - Dashboard">
  <div class="min-h-screen bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
      <!-- Encabezado -->
      <div class="mb-8">
        <h1 class="text-4xl font-bold text-gray-900">Crear Nueva Noticia</h1>
        <p class="mt-2 text-lg text-gray-600">Completa el formulario para publicar una nueva noticia</p>
      </div>

      <form id="createNewsForm" class="space-y-8">
        <!-- Grid Principal -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <!-- Columna Izquierda (2/3) -->
          <div class="lg:col-span-2 space-y-8">
            <!-- Sección Principal -->
            <div class="bg-white rounded-2xl shadow-sm p-8 space-y-8">
              <div class="space-y-6">
                <!-- Título -->
                <div>
                  <label for="title" class="block text-lg font-semibold text-gray-900">
                    Título de la Noticia
                  </label>
                  <p class="text-sm text-gray-500 mb-2">Escribe un título claro y atractivo</p>
                  <input
                    type="text"
                    id="titulo"
                    name="titulo"
                    required
                    class="w-full px-4 py-3 rounded-xl border border-gray-200 focus:ring-2 focus:ring-primary focus:border-primary transition duration-200"
                    placeholder="Ej: La Roja se prepara para las eliminatorias"
                  />
                </div>

                <!-- Subtítulo -->
                <div>
                  <label for="subtitle" class="block text-lg font-semibold text-gray-900">
                    Subtítulo
                  </label>
                  <p class="text-sm text-gray-500 mb-2">Añade un breve resumen de la noticia</p>
                  <input
                    type="text"
                    id="subtitulo"
                    name="subtitulo"
                    required
                    class="w-full px-4 py-3 rounded-xl border border-gray-200 focus:ring-2 focus:ring-primary focus:border-primary transition duration-200"
                    placeholder="Ej: La selección chilena inicia su preparación para los próximos encuentros"
                  />
                </div>

                <!-- Contenido -->
                <div>
                  <label for="content" class="block text-lg font-semibold text-gray-900">
                    Contenido
                  </label>
                  <p class="text-sm text-gray-500 mb-2">Desarrolla el cuerpo de la noticia</p>
                  <textarea
                    id="contenido"
                    name="contenido"
                    rows="12"
                    required
                    class="w-full px-4 py-3 rounded-xl border border-gray-200 focus:ring-2 focus:ring-primary focus:border-primary transition duration-200"
                    placeholder="Escribe el contenido detallado de la noticia aquí..."
                  ></textarea>
                </div>
              </div>
            </div>
          </div>

          <!-- Columna Derecha (1/3) -->
          <div class="lg:col-span-1 space-y-8">
            <!-- Imagen Principal -->
            <div class="bg-white rounded-2xl shadow-sm p-8">
              <h3 class="text-lg font-semibold text-gray-900 mb-4">Imagen Principal</h3>
              <div class="space-y-4">
                <div class="relative border-2 border-dashed border-gray-200 rounded-xl p-6 hover:border-primary transition-colors">
                  <input
                    type="file"
                    id="image"
                    name="imagen"
                    accept="image/*"
                    class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                    required
                  />
                  <div class="text-center">
                    <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                      <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                    <p class="mt-2 text-sm text-gray-500">Arrastra una imagen o haz clic para seleccionar</p>
                    <p class="mt-1 text-xs text-gray-400">PNG, JPG, GIF hasta 10MB</p>
                  </div>
                </div>
                <div id="imagePreview" class="hidden">
                  <img src="" alt="Preview" class="w-full h-48 object-cover rounded-xl">
                </div>
              </div>
            </div>

            <!-- Tags -->
            <div class="bg-white rounded-2xl shadow-sm p-8">
              <h3 class="text-lg font-semibold text-gray-900 mb-4">Etiquetas</h3>
              <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
                {tags.map((tag) => (
                  <label class="relative flex items-center group">
                    <input 
                      type="checkbox" 
                      name="tags" 
                      value={tag.id}
                      class="peer absolute opacity-0 w-full h-full cursor-pointer z-10"
                    />
                    <div class="w-full px-2 py-1.5 rounded-lg border border-gray-200 
                                text-gray-700 text-xs
                                flex items-center justify-center text-center
                                hover:bg-gray-50
                                peer-checked:bg-primary/10 peer-checked:border-primary 
                                peer-checked:text-primary
                                transition-all duration-200">
                      {tag.nombre}
                    </div>
                  </label>
                ))}
              </div>
            </div>

            <!-- Botones de Acción -->
            <div class="bg-white rounded-2xl shadow-sm p-8">
              <div class="space-y-4">
                <button
                  type="submit"
                  class="w-full px-6 py-3 bg-primary text-white rounded-xl hover:bg-red-600 transition-colors duration-200 flex items-center justify-center gap-2"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                  </svg>
                  Publicar Noticia
                </button>
                <button
                  type="button"
                  class="w-full px-6 py-3 border border-gray-200 text-gray-700 rounded-xl hover:bg-gray-50 transition-colors duration-200"
                  onclick="window.location.href='/dashboard/manage-news'"
                >
                  Cancelar
                </button>
              </div>
            </div>
          </div>
        </div>
      </form>
    </div>
  </div>
</Layout>

<script>
  // Importar authService en el script del cliente
  import { authService } from '../../lib/authService';
  
  // Preview de imagen
  const imageInput = document.getElementById('image') as HTMLInputElement;
  const imagePreview = document.getElementById('imagePreview');
  const previewImg = imagePreview?.querySelector('img');

  imageInput?.addEventListener('change', (e) => {
    const file = (e.target as HTMLInputElement).files?.[0];
    if (file && imagePreview && previewImg) {
      const reader = new FileReader();
      reader.onload = (e) => {
        previewImg.src = e.target?.result as string;
        imagePreview.classList.remove('hidden');
      };
      reader.readAsDataURL(file);
    }
  });

  // Manejo del formulario actualizado
  const form = document.getElementById('createNewsForm') as HTMLFormElement;
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    try {
      const user = authService.getUser();
      if (!user) {
        throw new Error('No hay usuario autenticado');
      }

      const newsFormData = new FormData();
      
      // Agregar campos básicos
      newsFormData.append('titulo', (document.getElementById('titulo') as HTMLInputElement).value);
      newsFormData.append('subtitulo', (document.getElementById('subtitulo') as HTMLInputElement).value);
      newsFormData.append('contenido', (document.getElementById('contenido') as HTMLTextAreaElement).value);

      // Agregar imagen
      const imageInput = document.getElementById('image') as HTMLInputElement;
      if (imageInput.files && imageInput.files[0]) {
        newsFormData.append('imagen', imageInput.files[0], imageInput.files[0].name);
      }

      // Agregar tags
      const selectedTags = Array.from(document.querySelectorAll('input[name="tags"]:checked'))
        .map(checkbox => (checkbox as HTMLInputElement).value);
      if (selectedTags.length > 0) {
        newsFormData.append('tags', JSON.stringify(selectedTags));
      }

      const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:3001';
      
      console.log('Enviando datos:', {
        titulo: newsFormData.get('titulo'),
        subtitulo: newsFormData.get('subtitulo'),
        contenido: newsFormData.get('contenido'),
        imagen: newsFormData.get('imagen'),
        tags: newsFormData.get('tags')
      });

      const response = await fetch(`${API_URL}/api/news`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${authService.getToken()}`
        },
        body: newsFormData,
        credentials: 'include'
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Error al crear la noticia');
      }

      const data = await response.json();
      alert('Noticia creada exitosamente');
      window.location.href = '/dashboard/manage-news';
      
    } catch (error) {
      console.error('Error detallado:', error);
      alert(error.message || 'Error al crear la noticia. Por favor, intenta nuevamente.');
    }
  });
</script>

<style>
  /* Estilos personalizados para Choices */
  :global(.choices) {
    @apply mb-2;
  }
  
  :global(.choices__inner) {
    @apply !border-gray-200 !rounded-xl !min-h-[45px];
  }

  :global(.choices__input) {
    @apply !bg-transparent;
  }
</style>