---
import Layout from '../../layouts/DashboardLayout.astro';

interface Noticia {
  id: number;
  titulo: string;
  subtitulo: string;
  contenido: string;
  imagen_url?: string;
  estado: string;
  usuario_id: number;
  created_at: string;
  usuario: {
    id: number;
    nombre: string;
    apellido: string;
  };
  noticias_etiquetas?: {
    etiqueta: {
      nombre: string;
    };
  }[];
}

// Obtener las noticias del backend
let news: Noticia[] = [];
try {
  const token = localStorage.getItem('authToken');
  if (!token) {
    console.error('No hay token de autenticación');
    return;
  }

  const response = await fetch('http://localhost:3001/api/news', {
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    }
  });

  const data = await response.json();
  
  if (response.ok) {
    news = Array.isArray(data) ? data : [];
    console.log('Datos recibidos en el frontend:', news);
  } else {
    console.error('Error del servidor:', data.error);
  }
} catch (error) {
  console.error('Error al obtener noticias:', error);
}

const getStatusColor = (status: string) => {
  switch (status) {
    case 'publicado': return 'bg-green-100 text-green-800 border-green-200';
    case 'pendiente': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
    case 'borrador': return 'bg-gray-100 text-gray-800 border-gray-200';
    default: return 'bg-gray-100 text-gray-800 border-gray-200';
  }
};

const getStatusText = (status: string) => {
  switch (status) {
    case 'publicado': return 'Publicado';
    case 'pendiente': return 'Pendiente';
    case 'borrador': return 'Borrador';
    default: return status;
  }
};
---

<Layout>
  <div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Header -->
      <div class="mb-8">
        <div class="flex justify-between items-center">
          <div>
            <h1 class="text-3xl font-bold text-gray-900">Gestionar Noticias</h1>
            <p class="mt-2 text-sm text-gray-600">Administra y gestiona todas las noticias del portal</p>
          </div>
          <a 
            href="/dashboard/create-news" 
            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
          >
            <i class="fas fa-plus mr-2"></i>
            Crear Noticia
          </a>
        </div>
      </div>

      <!-- Filtros -->
      <div class="bg-white rounded-lg shadow p-6 mb-8">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
          <!-- Estado -->
          <div>
            <label for="status" class="block text-sm font-medium text-gray-700 mb-2">
              Estado
            </label>
            <select id="status" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 rounded-md">
              <option value="">Todos</option>
              <option value="publicado">Publicado</option>
              <option value="pendiente">Pendiente</option>
              <option value="borrador">Borrador</option>
            </select>
          </div>


          <!-- Fecha -->
          <div>
            <label for="date" class="block text-sm font-medium text-gray-700 mb-2">
              Fecha
            </label>
            <input 
              type="date" 
              id="date"
              class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 rounded-md"
            >
          </div>

          <!-- Búsqueda -->
          <div>
            <label for="search" class="block text-sm font-medium text-gray-700 mb-2">
              Buscar
            </label>
            <div class="mt-1 relative rounded-md shadow-sm">
              <input 
                type="text"
                id="search"
                class="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 rounded-md"
                placeholder="Buscar noticias..."
              >
              <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                <i class="fas fa-search text-gray-400"></i>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Tabla -->
      <div class="bg-white rounded-lg shadow overflow-hidden">
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Título
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Estado
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Autor
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Fecha
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Acciones
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              {news.map((item) => (
                <tr class="hover:bg-gray-50 transition-colors duration-200">
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                      {item.imagen_url && (
                        <div class="flex-shrink-0 h-10 w-10 mr-3">
                          <img class="h-10 w-10 rounded-md object-cover" src={item.imagen_url} alt={item.titulo} />
                        </div>
                      )}
                      <div>
                        <div class="text-sm font-medium text-gray-900">{item.titulo}</div>
                        {item.subtitulo && <div class="text-sm text-gray-500">{item.subtitulo}</div>}
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(item.estado)}`}>
                      {getStatusText(item.estado)}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-gray-900">
                      {(() => {
                        console.log('Datos del usuario para la noticia:', item.usuario_id, item.usuario);
                        return item.usuario 
                          ? `${item.usuario.nombre} ${item.usuario.apellido}`
                          : `ID: ${item.usuario_id} - Usuario no encontrado`;
                      })()}
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-gray-900">
                      {new Date(item.created_at).toLocaleDateString('es-ES', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <div class="flex space-x-3">
                      <button 
                        class="text-blue-600 hover:text-blue-900 transition-colors duration-200"
                        title="Editar"
                        onclick={`window.location.href='/dashboard/edit-news/${item.id}'`}
                      >
                        <i class="fas fa-edit"></i>
                      </button>
                      <button 
                        class="text-red-600 hover:text-red-900 transition-colors duration-200"
                        title="Eliminar"
                        onclick={`window.confirmDelete(${item.id})`}
                      >
                        <i class="fas fa-trash"></i>
                      </button>
                      <button 
                        class="text-green-600 hover:text-green-900 transition-colors duration-200"
                        title="Ver"
                        onclick={`window.location.href='/news/${item.id}'`}
                      >
                        <i class="fas fa-eye"></i>
                      </button>
                      {item.estado !== 'publicado' && (
                        <button 
                          class="text-yellow-600 hover:text-yellow-900 transition-colors duration-200"
                          title="Aprobar y publicar"
                          onclick={`window.confirmApprove(${item.id})`}
                        >
                          <i class="fas fa-check-circle"></i>
                        </button>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      <!-- Paginación -->
      <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 rounded-b-lg">
        <div class="flex-1 flex justify-between sm:hidden">
          <button class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
            Anterior
          </button>
          <button class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
            Siguiente
          </button>
        </div>
        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
          <div>
            <p class="text-sm text-gray-700">
              Mostrando <span class="font-medium">1</span> a <span class="font-medium">10</span> de <span class="font-medium">97</span> resultados
            </p>
          </div>
          <div>
            <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
              <button class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                <span class="sr-only">Anterior</span>
                <i class="fas fa-chevron-left"></i>
              </button>
              <button class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                1
              </button>
              <button class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                2
              </button>
              <button class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                3
              </button>
              <button class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                <span class="sr-only">Siguiente</span>
                <i class="fas fa-chevron-right"></i>
              </button>
            </nav>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<div id="deleteModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
  <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
    <div class="mt-3 text-center">
      <h3 class="text-lg leading-6 font-medium text-gray-900">Confirmar eliminación</h3>
      <div class="mt-2 px-7 py-3">
        <p class="text-sm text-gray-500">
          ¿Estás seguro de que deseas eliminar esta noticia? Esta acción no se puede deshacer.
        </p>
      </div>
      <div class="items-center px-4 py-3">
        <button
          id="deleteConfirmBtn"
          class="px-4 py-2 bg-red-600 text-white text-base font-medium rounded-md shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500"
        >
          Eliminar
        </button>
        <button
          onclick="closeModals()"
          class="ml-3 px-4 py-2 bg-gray-100 text-gray-700 text-base font-medium rounded-md shadow-sm hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500"
        >
          Cancelar
        </button>
      </div>
    </div>
  </div>
</div>

<div id="approveModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
  <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
    <div class="mt-3 text-center">
      <h3 class="text-lg leading-6 font-medium text-gray-900">Confirmar publicación</h3>
      <div class="mt-2 px-7 py-3">
        <p class="text-sm text-gray-500">
          ¿Estás seguro de que deseas aprobar y publicar esta noticia?
        </p>
      </div>
      <div class="items-center px-4 py-3">
        <button
          id="approveConfirmBtn"
          class="px-4 py-2 bg-green-600 text-white text-base font-medium rounded-md shadow-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500"
        >
          Publicar
        </button>
        <button
          onclick="closeModals()"
          class="ml-3 px-4 py-2 bg-gray-100 text-gray-700 text-base font-medium rounded-md shadow-sm hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500"
        >
          Cancelar
        </button>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  // Funciones de utilidad para el estado
  function getStatusColor(status) {
    switch (status) {
      case 'publicado': return 'bg-green-100 text-green-800';
      case 'pendiente': return 'bg-yellow-100 text-yellow-800';
      case 'borrador': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  }

  function getStatusText(status) {
    switch (status) {
      case 'publicado': return 'Publicado';
      case 'pendiente': return 'Pendiente';
      case 'borrador': return 'Borrador';
      default: return status;
    }
  }

  // Función para mostrar notificaciones
  function showNotification(message, type = 'success') {
    console.log(`${type}: ${message}`);
  }

  // Función para cargar noticias
  async function loadNews(search = '') {
    try {
      const token = localStorage.getItem('authToken');
      if (!token) {
        console.error('No hay token de autenticación');
        return;
      }

      const response = await fetch('http://localhost:3001/api/news', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) throw new Error('Error al obtener noticias');
      
      const news = await response.json();
      console.log('Noticias recibidas:', news); // Debug

      const tbody = document.querySelector('tbody');
      if (!tbody) {
        console.error('No se encontró el tbody'); // Debug
        return;
      }

      tbody.innerHTML = '';

      // Filtrar noticias si hay búsqueda
      const filteredNews = news.filter(item => 
        search === '' || 
        item.titulo.toLowerCase().includes(search.toLowerCase()) ||
        item.subtitulo?.toLowerCase().includes(search.toLowerCase())
      );

      console.log('Noticias filtradas:', filteredNews); // Debug

      if (filteredNews.length === 0) {
        tbody.innerHTML = `
          <tr>
            <td colspan="5" class="px-6 py-4 text-center text-gray-500">
              No se encontraron noticias
            </td>
          </tr>
        `;
        return;
      }

      filteredNews.forEach(item => {
        const tr = document.createElement('tr');
        tr.className = 'hover:bg-gray-50 transition-colors duration-200';
        tr.innerHTML = `
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="flex items-center">
              ${item.imagen_url ? `
                <div class="flex-shrink-0 h-10 w-10 mr-3">
                  <img class="h-10 w-10 rounded-md object-cover" src="${item.imagen_url}" alt="${item.titulo}" />
                </div>
              ` : ''}
              <div>
                <div class="text-sm font-medium text-gray-900">${item.titulo}</div>
                ${item.subtitulo ? `<div class="text-sm text-gray-500">${item.subtitulo}</div>` : ''}
              </div>
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(item.estado)}">
              ${getStatusText(item.estado)}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm text-gray-900">
              ${item.usuario ? `${item.usuario.nombre} ${item.usuario.apellido}` : 'Usuario no encontrado'}
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm text-gray-900">
              ${new Date(item.created_at).toLocaleDateString('es-ES', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
              })}
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
            <div class="flex space-x-3">
              <button 
                class="text-blue-600 hover:text-blue-900 transition-colors duration-200"
                title="Editar"
                onclick="window.location.href='/dashboard/edit-news/${item.id}'"
              >
                <i class="fas fa-edit"></i>
              </button>
              <button 
                class="delete-news-btn text-red-600 hover:text-red-900 transition-colors duration-200"
                title="Eliminar"
                data-news-id="${item.id}"
              >
                <i class="fas fa-trash"></i>
              </button>
              <button 
                class="text-green-600 hover:text-green-900 transition-colors duration-200"
                title="Ver"
                onclick="window.location.href='/news/${item.id}'"
              >
                <i class="fas fa-eye"></i>
              </button>
              ${item.estado !== 'publicado' ? `
                <button 
                  class="approve-news-btn text-yellow-600 hover:text-yellow-900 transition-colors duration-200"
                  title="Aprobar y publicar"
                  data-news-id="${item.id}"
                >
                  <i class="fas fa-check-circle"></i>
                </button>
              ` : ''}
            </div>
          </td>
        `;

        // Agregar event listeners
        const deleteBtn = tr.querySelector('.delete-news-btn');
        const approveBtn = tr.querySelector('.approve-news-btn');

        deleteBtn?.addEventListener('click', () => {
          const deleteModal = document.getElementById('deleteModal');
          if (deleteModal) {
            deleteModal.classList.remove('hidden');
            deleteModal.dataset.newsId = item.id;
          }
        });

        approveBtn?.addEventListener('click', () => {
          const approveModal = document.getElementById('approveModal');
          if (approveModal) {
            approveModal.classList.remove('hidden');
            approveModal.dataset.newsId = item.id;
          }
        });

        tbody.appendChild(tr);
      });
    } catch (error) {
      console.error('Error detallado:', error); // Debug más detallado
      showNotification('Error al cargar noticias', 'error');
    }
  }

  // Event Listeners
  document.addEventListener('DOMContentLoaded', () => {
    loadNews();

    // Búsqueda
    let searchTimeout;
    document.getElementById('search')?.addEventListener('input', (e) => {
      const target = e.target;
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        loadNews(target.value);
      }, 300);
    });

    // Modal handlers
    ['deleteModal', 'approveModal'].forEach(modalId => {
      document.getElementById(modalId)?.addEventListener('click', (e) => {
        if (e.target.id === modalId) {
          closeModals();
        }
      });
    });

    document.getElementById('deleteConfirmBtn')?.addEventListener('click', async () => {
      const deleteModal = document.getElementById('deleteModal');
      const newsId = deleteModal?.dataset.newsId;

      if (!newsId) {
        console.error('No se encontró el ID de la noticia');
        return;
      }

      try {
        const token = localStorage.getItem('authToken');
        if (!token) {
          showNotification('No hay sesión activa', 'error');
          return;
        }

        console.log('Intentando eliminar noticia con ID:', newsId);

        const response = await fetch(`http://localhost:3001/api/news/${newsId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        const data = await response.json();
        console.log('Respuesta del servidor:', data);

        if (!response.ok) {
          throw new Error(data.error || 'Error al eliminar noticia');
        }

        showNotification('Noticia eliminada exitosamente');
        closeModals();
        
        // Forzar recarga de noticias después de eliminar
        setTimeout(async () => {
          await loadNews();
          console.log('Lista de noticias actualizada');
        }, 500);

      } catch (error) {
        console.error('Error al eliminar:', error);
        showNotification(error.message || 'Error al eliminar noticia', 'error');
      }
    });

    document.getElementById('approveConfirmBtn')?.addEventListener('click', async () => {
      const approveModal = document.getElementById('approveModal');
      const newsId = approveModal?.dataset.newsId;

      if (!newsId) return;

      try {
        const response = await fetch(`http://localhost:3001/api/news/${newsId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          },
          body: JSON.stringify({
            estado: 'publicado'
          })
        });

        if (!response.ok) throw new Error('Error al publicar noticia');

        showNotification('Noticia publicada exitosamente');
        closeModals();
        loadNews();
      } catch (error) {
        console.error('Error:', error);
        showNotification('Error al publicar noticia', 'error');
      }
    });
  });

  // Función para cerrar modales
  function closeModals() {
    ['deleteModal', 'approveModal'].forEach(modalId => {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.add('hidden');
        delete modal.dataset.newsId;
      }
    });
  }
</script>